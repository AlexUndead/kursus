Сервис обработки ГРЗ автомобилей
-----------
REST API с одним запросом – на вход приходит строка вида A777AA77*A, где первая часть это номер транспортного средства, а вторая часть его категория. Знак должен соответствовать Госту, но может быть передан и латиницей, и кириллицей. Вторая часть, это категория автомобиля, может быть одной из букв: A, B, C причем тоже и латиницей, и кириллицей. Нужно валидировать строку, чтобы она подходила под формат и, если все подходит, записывала в базу данные, но только кириллицей.


Стек
-----------------------------
1. Django

2. DRF

3. Docker

4. PostgreSQL

Минимум
-----------------------------
Сервис разворачивается одной командой, я могу выполнить запрос, посмотреть, что в админке появились данные или вернулось Bad Request.

Возможные расшинения
-----------------------------
1. Логирование запросов и ответов

2. Добавление в базу только новых ГРЗ

3. Сопоставление категорий и ГРЗ, так как госты на номера разных категорий разные

4. Отправка на указанный в настройках email сообщения, что в базу добавлен новый ГРЗ

5. GET запросы на получение одного экземпляра и всего массива с разным набором данных

6. Тесты

7. Автодокументация в swagger

8. Какая-то аутентификация(достаточно токена, который нужно положить в headers, чтобы запрос прошел. Не надо создавать пользователей и методов авторизации)


Check-list
---------------
1. Логирования в привычном понимании нет. В registration я записываю необработанную строку.

2. Это выполнено.

3. Это не выполнено, но можно быстро дописать. (Не стал делать из-за большого кол-во неактуальной информации о категориях).

4. Это выполнено. Нужно заполнить данные для SMTP в настройках и раскомментировать единственную функцию в signals.py

5. Это выполнено.

6. Это выполнено. Небольшой набор unit тестов написанных на pytest.

7. Это выполнено.

8. Это не выполнено. Не понял что нужно. Если просто добавить header в запрос делал бы с помощью middleware

От разработчика
---------------
1. Сервис запускается с помощью команды docker-compose up --build. 

2. Сервис работает в режиме DEBUG т.к. это приемлемо для тестовой задачи. 

3. Свагер открывается по адресу /swagger/. 

4. Тесты запускаются командой docker exec -it backend pytest

5. Список всех vehicle располагается по адресу /registration/vehicles/

6. Handle для создания vehicle располагается по адресу /registration/registration/
